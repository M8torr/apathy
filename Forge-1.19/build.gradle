buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven {
			url = 'https://repo.spongepowered.org/repository/maven-public/'
			content { includeGroup "org.spongepowered" }
		}
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${project.modId}-forge-${project.minecraftVersion}"

mixin {
	//Tell mixingradle what filename the refmap should use
	add sourceSets.main, "${project.modId}.refmap.json"
	
	//Tell mixingradle which mixin configs exist
	config "${project.modId}.common.mixins.json"
	config "${project.modId}.forge.mixins.json"
}

dependencies {
	minecraft "net.minecraftforge:forge:${project.forgeVersion}"
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor" //todo does mixin gradle do this? maybe
	
	compileOnly project(":Xplat-1.19")
}

//fold in xplat resources and sources

processResources {
	//include common resources
	from project(":Xplat-1.19").sourceSets.main.resources
}

tasks.withType(JavaCompile) {
	source(project(":Xplat-1.19").sourceSets.main.allSource)
}

minecraft {
	mappings channel: 'official', version: project.minecraftVersion //official mappings epic moments
	
	runs {
		client {
			taskName 'Forge Client 1.19'
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			mods {
				"${project.modId}" {
					source sourceSets.main
					source project(":Xplat-1.19").sourceSets.main
				}
			}
		}
		
		server {
			taskName 'Forge Server 1.19'
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			mods {
				"${project.modId}" {
					source sourceSets.main
					source project(":Xplat-1.19").sourceSets.main
				}
			}
		}
	}
}

//conventional to include a jar manifest in forge mods, for whatever reason. idk, it doesn't hurt 

jar {
	manifest {
		attributes([
			"Specification-Title": "Apathy",
			"Specification-Vendor": "quaternary",
			"Specification-Version": "1",
			"Implementation-Title": "Apathy",
			"Implementation-Version": "${archiveVersion.get()}",
			"Implementation-Vendor": "quaternary"
		])
	}
	finalizedBy 'reobfJar'
}